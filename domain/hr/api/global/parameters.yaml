---
openapi: "3.0.1"
info:
  title: "Domain API Specification"
  description: "API generated from DSL domain ontology."
  version: "1.0.0"
components:
  parameters:

    # ==========================================================
    # 1. Pagination Parameters (Used on all GET /collection endpoints)
    # ==========================================================

    Limit:
      name: limit
      in: query
      description: |
        The maximum number of records to return in the response. 
        Used for pagination.
      schema:
        type: integer
        format: int32
        minimum: 1
        maximum: 100
        default: 50
      required: false

    Offset:
      name: offset
      in: query
      description: |
        The number of records to skip before starting to collect the result set. 
        Used for offset-based pagination.
      schema:
        type: integer
        format: int32
        minimum: 0
        default: 0
      required: false

    # ==========================================================
    # 2. Filtering and Sorting Parameters
    # ==========================================================

    Filter:
      name: filter
      in: query
      description: |
        A filter expression used to narrow down the results based on specific field values.
        Syntax should follow a standard format (e.g., RSQL, GraphQL-style).
      schema:
        type: string
        example: status==ACTIVE;department=in=(HR,FINANCE)
      required: false

    Sort:
      name: sort
      in: query
      description: |
        A comma-separated list of fields by which to sort the collection. 
        Prefix with '-' for descending order (e.g., 'name,-effectiveDate').
      schema:
        type: string
        example: name,-effectiveDate
      required: false

    # ==========================================================
    # 3. Standard Path/ID Parameters
    # (These are used when a resource's key structure is uniform)
    # ==========================================================

    RecordId:
      name: recordId
      in: path
      description: The unique identifier (Personnel Record Key) of the employee record.
      schema:
        type: string
        pattern: '^PR-[A-Z0-9]{5,10}$'
        example: PR-1234567
      required: true

    EffectiveDate:
      name: effectiveDate
      in: query
      description: |
        The date used to retrieve a time-sensitive record's value (e.g., benefits, compensation) 
        as of a specific point in history. If omitted, the current date is assumed.
      schema:
        type: string
        format: date
        example: 2025-01-01
      required: false